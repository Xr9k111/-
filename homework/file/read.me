#include <iostream>
#include <fstream>
#include <array>
#include <string>

–ó–∞–¥–∞–Ω–∏–µ 1 (2b)
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ ID3v1 MP3-—Ñ–∞–π–ª–∞. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –Ω–µ –≤—Å–µ MP3-—Ñ–∞–π–ª—ã
—Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π ID3-—Ç–µ–≥; b. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å

 int main()
 {
 std::fstream file;
 file.open("1.mp3", std::ios::binary | std::ios::in);

 if(!file.is_open()){
 std::cout << "file don't work" << "\n";
 return - 1;
 }

 char ID3_tag[1024];
 int offset = 48;
 int size=offset + 10;
 int i=offset;

 file.read(ID3_tag, 1024);

 file.close();
 for (i; i< size; i++){
 std::cout << ID3_tag[i];
    }

 std::cout << "\n";
 return 0;
}


–ó–∞–¥–∞–Ω–∏–µ 2(3j)
–ü—Ä–æ—Ç–∞–±—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é. –ù–∞—á–∞–ª—å–Ω—É—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–æ—á–∫–∏, —à–∞–≥, –ø–∞—Ä–∞–º–µ—Ç—Ä –ß
—Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ in.txt. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª out.txt. –§–æ—Ä–º–∞—Ç
–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:
x0, y(x0)
x1, y(x1)
x2, y(x2)
–∏ —Ç.–¥.
j. ùë¶ = x + x^2 / 3 + x^3 / 4 + ... x^C/(C+1)
*/

#include <iostream>
#include <fstream>
#include <cmath>
#include<cmath>

int main() {
    double x0, x1, step, C; // –ø–∞—Ä–∞–º–µ—Ç—Ä –ß - —ç—Ç–æ C
    std::ifstream f("input.txt");
    f >> x0 >> x1 >> step >> C;
    f.close();

    std::ofstream fout("out.txt");
    for (double x = x0; x <= x1; x += step) {
        double y = 0;
        for (int i = 1; i <= C; i++) {
            if( i == 1)
                y += x;
            else
                y += pow(x, i) / (i + 1);
        }
        fout << x << ", " << y << std::endl;
    }
    fout.close();

    std::cout << "Data save in out.txt" << std::endl;

    return 0;
}

–ó–∞–¥–∞–Ω–∏–µ 3(5)
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö: –§–∞–º–∏–ª–∏—è, –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, –ö—É—Ä—Å.

–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: 1
—Å—Ç—Ä–æ–∫–∞ –§–∞–º–∏–ª–∏—è, 2 —Å—Ç—Ä–æ–∫–∞ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, 3 —Å—Ç—Ä–æ–∫–∞ –ö—É—Ä—Å. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
–ø–æ–≤—Ç–æ—Ä—è—é—Ç —Ç—Ä–æ–π–∫–∞–º–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

#include <iostream>
#include <fstream>
#include <array>
#include <string>

int main()
{
 std::fstream file;


 file.open("Profiles.txt", std::ios::out | std::ios::in);


 if((!file.is_open()) || (!file.is_open())){
 std::cout << "Error" << "\n";
 return - 1;
 }


 struct info{
 std::string surname[2];
 float middle[2];
 int kurse[2];
 };


 struct info students[2];
 for(int v = 0; v < 2; v++){
 for(int i = 0; i < 2; i++){
 std::cin >> students[i].surname[v];
 std::cin >> students[i].middle[v];
 std::cin >> students[i].kurse[v];
 }
 }
 std::cout << "Ready!";


 for(int v = 0; v < 2; v++){
 for(int i = 0; i < 2; i++){
 file << students[i].surname[v] << "\n" << students[i].middle[v] << "\n" << students[i].kurse[v] << "\n";
 }
 }


 file.close();


 std::cout << "\n";
 return 0;
 }
