//. Преобразовать матрицу: элементы строки, в которой находится минимальный
//элемент матрицы, заменить нулями

#include <iostream>
#include <array>

using std::array;

// Функция для поиска минимального элемента в матрице
int findMin(const array<array<int, 3>, 3>& matrix) {
    int min_element = matrix[0][0];
    for (int i = 0; i < matrix.size(); i++) {
        for (int j = 0; j < matrix[i].size(); j++) {
            int element = matrix[i][j];
            if (element < min_element) {
                min_element = element;
            }
        }
    }
    return min_element;
}

// Функция для замены элементов в строке с минимальным элементом на нули
void replaceRow(array<array<int, 3>, 3>& matrix) {
    int min_element = findMin(matrix);
    for (int i = 0; i < matrix.size(); i++) {
        bool has_min = false;
        for (int j = 0; j < matrix[i].size(); j++) {
            if (matrix[i][j] == min_element) {
                has_min = true;
                break;
            }в
        }
        if (has_min) {
            for (int j = 0; j < matrix[i].size(); j++) {
                matrix[i][j] = 0; // заменяем элементы в строке на нули
            }
            break; // выходим из цикла после первой замены строки
        }
    }
}

int main() {
    // Создаем матрицу 3x3 и заполняем ее случайными числами от 0 до 9
    array<array<int, 3>, 3> matrix = {{
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    }};

    // Выводим начальную матрицу
    std::cout << "Исходная матрица:" << std::endl;
    for (int i = 0; i < matrix.size(); i++) {
        for (int j = 0; j < matrix[i].size(); j++) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    // Заменяем элементы в строке с минимальным значением на нули
    replaceRow(matrix);

    // Выводим конечную матрицу
    std::cout << "Матрица после преобразования:" << std::endl;
    for (int i = 0; i < matrix.size(); i++) {
        for (int j = 0; j < matrix[i].size(); j++) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
